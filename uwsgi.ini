[uwsgi]
module              = server
callable            = application

# By default uWSGI will execute Python code within a sub interpreter of the process rather than the main
# Python interpreter created when Python is first initialized. This is done to allow multiple separate Python web
# applications to be run within the one process but to be sufficiently separated so as to not interfere with each other.
# Older versions of uWSGI can fail however when using sub interpreters with threading enabled. It is therefore safest
# to use this option and restrict yourself to a single web application per process. Running a single web application
# in each process with uWSGI is the normal use case so it would be unlikely that this restriction would be an issue
single-interpreter  = true

# uWSGI will spawn 1 process with 8 threads
processes           = 1
threads             = 2

# Port for RP-PM communication
http-socket         = :8080

plugins             = python

# Server socket listen backlog is limited to 128 connections.
# Check with kernel, some default to 100 or 128 so increasing this number requires increasing the kernel default as well
listen              = 128

# Timeout values in ms
http-timeout        = 600
socket-timeout      = 600


# Read uWSGI: The Art of Graceful Reloading.
# lazy-apps mode instead loads your application one time per worker. It will require about O(n) time
# to load it (where n is the number of workers), will very probably consume more memory, but will run in
# a more consistent and clean environment
lazy-apps           = true

# https://github.com/unbit/uwsgi/issues/1609
# These hooks with the correct master and enable-threads are used to gracefully stop the service. I am not 100% sure if there
# are better ways to configure this but this seems to be doing the job
hook-master-start   = unix_signal:15 gracefully_kill_them_all
hook-master-start   = unix_signal:2 gracefully_kill_them_all
